data_to_sort	dcd		34, 23, 22, 8, 50, 74, 2, 1, 17, 40
list_elements	dcd		10
			
main			mov		r0, #-1				; Assigning -1 to r9 because -1 will  be the sentinel value
			ldr		r3, =data_to_sort   	; Load the starting address of the first
			;		of element of the array of numbers into r3
			ldr		r4, =list_elements  	; Address of number of elements in the list
			ldr		r4, [r4]            	; Number of elements in the list
			
			add		r1, r3, #400	 		; Location of first element of linked list - "head pointer"
			;		(note that I assume it is at a "random" location beyond the end of the array.)
			
			mov		r6, r1
			sub		r5, r6, #32			; r5 points to our previous pointer
			
			;#################################################################################
			;		Include any setup code here prior to loop that loads data elements in array
			;#################################################################################
			
			mov		r10, #0				; Initialize r10 as iterating register for the array
			;		Initialize first element in the doubly linked list:
			str		r0, [r6, #0]			;	- First Address stores the previous list address (-1 is our sentinel)
			;		- Second Address stores the value
			ldr		r2, [r3, r10]			; 		- Load the first value from the array into r2: 'r2 <- data_to_sort[0]'
			str		r2, [r6, #4]			; 		- Store r2 into the list element's second address
			str		r0, [r6, #8]			;	- Store next address in 2nd block of the element
			sub		r4, r4, #1			;	- Subtract the number of elements by 1
			
			;#################################################################################
			;		Start a loop here to load elements in the array and add them to a linked list
			;#################################################################################
			
loadFor		cmp		r4, #0				; Compare r4 and 0
			ble		endLoad				; If r4 <= 0, then end the for loop
			
			add		r10, r10, #4			; Increment the iterator register by 1 scaled value, r10 <- i + 1
			ldr		r2, [r3, r10]			; Load the array value into r2, r2 <- data_to_sort[i]
			add		r6, r6, #32			; Move the current pointer (r6) to the next element in the doubly linked list
			add		r5, r5, #32			; Move the previous pointer (r5) to the next element in the doubly linked list
			sub		r4, r4, #1			; Decrement the number of values to load from the array by 1
			bl		insert				; Branch and link to the insert function
			b		loadFor				; Branch back to the beginning of the loop unconditionally
			
endLoad
			
			;		r1 = head pointer; r2 = prev pointer; r3 = curr pointer; r4 = n; r5 = value at previous pointer
			;		r6 = value at current pointer ; r8 = address being passed to swap funciton
			
			mov		r2, r1				; r2 gets the head pointer (curr)
			add		r3, r2, #32			; r3 gets the next pointer
			
			ldr		r4, =list_elements  	; Address of number of elements in the list
			ldr		r4, [r4]            	; Number of elements in the list
			
sortFor		cmp		r4, #1				; check if there is only one element
			ble		endSort				; if there is only one element, end sort
			
while		ldr		r5, [r2, #4]			; value at previous pointer
			ldr		r6, [r3, #4]			; value at current pointer
			
			cmp		r5, r6				; compare the values at the previous (r5) and current (r6) pointers
			ble		sortIncr				; if the value at the previous pointer is less than or equal to the value at the currrent pointer, skip the swap
			mov		r8, r3				; r8 is assigned the address of the current pointer
			bl		swap					; execute swap (if previous value is greater than current)
			
whileIncr		ldr		r2, [r3, #0]			; load into r2 the value of the current pointer's previous pointer, to get r2 to point at the value before it
			cmp		r2, r0				; check if the value of the current pointer is null
			beq		sortIncr				; if it is null, go to sortIncr
			bl		while				; if it is not null, continue swapping
			
sortIncr		sub		r4, r4, #1			; subtract one from the number of elements (r4)
			cmp		r4, #1				; if it is 1, endSort
			ble		endSort
			
			add		r3, r3, #32			; increment curr pointer (r3) to the next element
			ldr		r2, [r3, #0]			; increment previous pointer (r2) to be where curr pointer's (r3) previous pointer is
			bl		sortFor				; continue sorting
			
endSort		end		; sorting completed
			
			;#################################################################################
			;		Add insert, swap, delete functions
			;#################################################################################
			
insert									; Insert takes 3 arguments: r2 = value to be inserted, r5 = prev addr, r6 = curr addr
			str		r6, [r5, #8]			; Store curr address as the next address of the previous element, overwriting the sentinel character
			str		r5, [r6]				; Store previous addr into current addr value
			str		r2, [r6, #4]			; Store value in curr addr offset by 4
			str		r0, [r6, #8]			; Store sentinel
			mov		r15, r14				; Reset the PC
			
swap			ldr		r9,  [r8, #0]			; Load address of where current element's (r8) previous pointer is pointing to in r9
			ldr		r10, [r8, #8]			; Load address of where current element's (r8) next pointer is pointing to in r10
			ldr		r12, [r9, #0]			; Load address of previous element's (r9) previous pointer is pointing to in r12
			ldr		r7,  [r9, #8]			; Load address of previous element's (r9) next pointer is pointing to in r7
			
			cmp		r10, r0				; Check if the the current element's next pointer (r10) is null
			beq		prevStore				; If it is null, we don't need to update the next pointer's value, so skip ahead to prevStore
			str		r9,  [r10, #0]			; Store N-1's address into next elements previous pointer
			
prevStore		cmp		r12, r0				; Check if previous element's previous pointer value (r12) is null
			beq		store				; If it is null, don't need to update previous previous pointer, so skip to store
			str		r8, 	[r12, #8]			; Store the previous previous element's (r12) next pointer to be the current element (r8)
			
store		str		r12, [r8, #0]			; Store N-1's previous pointer in current element's previous pointer location
			str		r9,  [r8, #8]			; Store N-1's address in current element's next pointer location
			str		r10, [r9, #8]			; Store current element's next pointer in N-1's next pointer location
			str		r7, [r9, #0]			; Store N-1's next pointer in N-1's previous pointer location		
			mov		r15, r14				; Reset PC
			
delete									; Delete takes 2 arguments: r5 = prev addr, r6 = curr addr
			ldr		r9, [r6, #8]			; Load the current pointer's 'next' address into the temp reg r9
			str		r9, [r5, #8]			; Store r9 into the previous pointer's 'next' address
			str		r5, [r6, #32]			; Store the previous pointer's address into the next pointer's 'previous' address
			mov		r15, r14				; Reset PC
